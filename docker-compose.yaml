services:
  # 1. Infrastruttura Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    networks:
      - galactic-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    networks:
      - galactic-net
    depends_on:
      - zookeeper
    ports:
      - "9092:9092" # Espone Kafka all'esterno per test locali
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "voyage-topic:1:1" # Crea il topic all'avvio
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks:
      - galactic-net
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-galaxy-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092

  postgres-db:
    image: postgres:14
    container_name: postgres-db
    networks:
      - galactic-net
    environment:
      POSTGRES_USER: galactic_user
      POSTGRES_PASSWORD: galactic_password
      POSTGRES_DB: gcc_database
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U galactic_user -d gcc_database" ]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    networks:
      - galactic-net
    ports:
      - "8888:8080" # Accedi ad Adminer su http://localhost:8888
    depends_on:
      - postgres-db

  navecom:
    build:
      context: ./navecom
      dockerfile: Dockerfile.jvm
    container_name: navecom
    networks:
      - galactic-net
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVER_PORT=8081

  fuelstationcontrol:
    build:
      context: ./fuelstationcontrol
      dockerfile: Dockerfile.jvm
    container_name: fuelstationcontrol
    networks:
      - galactic-net
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=fuel-group

  securitycontrol:
    build:
      context: ./securitycontrol
      dockerfile: Dockerfile.jvm
    container_name: securitycontrol
    networks:
      - galactic-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=security-group
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/gcc_database
      - SPRING_DATASOURCE_USERNAME=galactic_user
      - SPRING_DATASOURCE_PASSWORD=galactic_password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update

  centrallogic:
    build:
      context: ./centrallogic
      dockerfile: Dockerfile.jvm
    container_name: central-logic-consumer
    networks:
      - galactic-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=central-logic-group
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/gcc_database
      - SPRING_DATASOURCE_USERNAME=galactic_user
      - SPRING_DATASOURCE_PASSWORD=galactic_password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update

  #stargateadmin:
   # build:
    #  context: ./stargateadmin
     # dockerfile: Dockerfile.jvm
    #container_name: stargateadmin
    #ports:
     # - "8082:8082" # API per monitorare lo stato
    #depends_on:
     # postgres-db:
      #  condition: service_healthy
    #environment:
     # - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/gcc_database
      #- SPRING_DATASOURCE_USERNAME=galactic_user
      #- SPRING_DATASOURCE_PASSWORD=galactic_password
      #- SERVER_PORT=8082
networks:
  galactic-net:
    driver: bridge

volumes:
  postgres-data: